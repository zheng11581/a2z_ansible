---
- name: db_opatch | Extract opatchauto patch files to patch base
  ansible.builtin.unarchive:
    src: "{{ oracle_stage }}/{{ item[0].filename }}"
    dest: "{{ oracle_patch_stage }}/{{ db_version }}"
    creates: "{{ oracle_patch_stage }}/{{ db_version }}/{{ item[0].creates | default(omit) }}"
    copy: false
  become: true
  become_user: "{{ oracle_user }}"
  with_nested:
    - "{{ oracle_sw_patches }}"
    - "{{ db_homes_config[dbh.home]['opatchauto'] }}"
  when:
    - apply_patches_db
    - item[1].patchid == item[0].patchid and item[1].state == 'present'
    - oracle_sw_copy
    - oracle_sw_unpack
    - db_homes_config[dbh.home]['opatchauto'] is defined
  tags:
    - oraswdbpsuunpack1

- name: db_opatch | Extract opatchauto patch files to patch base (from remote location)
  ansible.builtin.unarchive:
    src: "{{ oracle_stage_remote }}/{{ item[0].filename }}"
    dest: "{{ oracle_patch_stage }}/{{ db_version }}"
    creates: "{{ oracle_patch_stage }}/{{ db_version }}/{{ item[0].creates | default(omit) }}"
    copy: false
  become: true
  become_user: "{{ oracle_user }}"
  with_nested:
    - "{{ oracle_sw_patches }}"
    - "{{ db_homes_config[dbh.home]['opatchauto'] }}"
  when:
    - apply_patches_db
    - item[1].patchid == item[0].patchid and item[1].state == 'present'
    - not oracle_sw_copy
    - oracle_sw_unpack
    - db_homes_config[dbh.home]['opatchauto'] is defined


  tags:
    - oraswdbpsuunpack2

- name: db_opatch | Extract one-off patch files to patch base
  ansible.builtin.unarchive:
    src: "{{ oracle_stage }}/{{ item[0].filename }}"
    dest: "{{ oracle_patch_stage }}/{{ db_version }}"
    creates: "{{ oracle_patch_stage }}/{{ db_version }}/{{ item[0].creates | default(omit) }}"
    copy: false
  become: true
  become_user: "{{ oracle_user }}"
  with_nested:
    - "{{ oracle_sw_patches }}"
    - "{{ db_homes_config[dbh.home]['opatch'] }}"
  when:
    - apply_patches_db
    - item[1].patchid == item[0].patchid
    - ( item[0].upi is not defined or item[1].upi is not defined or item[0].upi == item[1].upi )
    - item[1].state == 'present'
    - oracle_sw_copy and oracle_sw_unpack
    - db_homes_config[dbh.home]['opatch'] is defined
  tags:
    - oraswdbpsuunpack1

- name: db_opatch | Extract one-off patch files to patch base (from remote location)
  ansible.builtin.unarchive:
    src: "{{ oracle_stage_remote }}/{{ item[0].filename }}"
    dest: "{{ oracle_patch_stage }}/{{ db_version }}"
    creates: "{{ oracle_patch_stage }}/{{ db_version }}/{{ item[0].creates | default(omit) }}"
    copy: false
  become: true
  become_user: "{{ oracle_user }}"
  with_nested:
    - "{{ oracle_sw_patches }}"
    - "{{ db_homes_config[dbh.home]['opatch'] }}"
  when:
    - apply_patches_db
    - item[1].patchid == item[0].patchid
    - ( item[0].upi is not defined or item[1].upi is not defined or item[0].upi == item[1].upi )
    - item[1].state == 'present'
    - not oracle_sw_copy and oracle_sw_unpack
    - db_homes_config[dbh.home]['opatch'] is defined
  tags:
    - oraswdbpsuunpack2
